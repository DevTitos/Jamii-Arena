# Generated by Django 5.2.5 on 2025-09-20 17:31

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("venue", models.CharField(default="Afrobeat Night", max_length=200)),
                ("date_time", models.DateTimeField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("music", "Music"),
                            ("dance", "Dance"),
                            ("comedy", "Comedy"),
                            ("poetry", "Poetry"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("upcoming", "Upcoming"),
                            ("registration_open", "Registration Open"),
                            ("voting_open", "Voting Open"),
                            ("finished", "Finished"),
                        ],
                        default="upcoming",
                        max_length=20,
                    ),
                ),
                (
                    "prize_pool",
                    models.DecimalField(decimal_places=2, default=0, max_digits=14),
                ),
                (
                    "registration_fee",
                    models.DecimalField(decimal_places=2, default=0, max_digits=14),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "organizer",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "organizer"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Contestant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("performance_title", models.CharField(max_length=200)),
                ("performance_video_ipfs_hash", models.CharField(max_length=100)),
                ("is_approved", models.BooleanField(default=False)),
                ("registered_date", models.DateTimeField(auto_now_add=True)),
                (
                    "artist",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "artist"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.profile",
                    ),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.competition",
                    ),
                ),
            ],
            options={
                "unique_together": {("competition", "artist")},
            },
        ),
        migrations.CreateModel(
            name="NFTCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nft_type",
                    models.CharField(
                        choices=[
                            ("vNFT", "Voting NFT"),
                            ("aNFT", "Artist NFT"),
                            ("pNFT", "Patron NFT"),
                            ("VVIP", "VVIP Ticket"),
                            ("VIP", "VIP Ticket"),
                            ("REG", "Regular Ticket"),
                        ],
                        max_length=4,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "max_supply",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100000),
                        ]
                    ),
                ),
                ("current_supply", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("nft_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.competition",
                    ),
                ),
            ],
            options={
                "verbose_name": "NFT Collection",
                "verbose_name_plural": "NFT Collections",
            },
        ),
        migrations.CreateModel(
            name="RevenueDistribution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=14)),
                (
                    "distribution_type",
                    models.CharField(
                        choices=[
                            ("prize", "Prize to Winner"),
                            ("organizer", "Revenue to Organizer"),
                            ("platform", "Platform Fee"),
                            ("artist_pool", "Pool for Participating Artists"),
                        ],
                        max_length=20,
                    ),
                ),
                ("recipient_wallet", models.CharField(max_length=64)),
                ("transaction_hash", models.CharField(max_length=100)),
                ("distributed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.competition",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NFT",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serial_number",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("owner_wallet", models.CharField(blank=True, max_length=64)),
                ("is_available", models.BooleanField(default=True)),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nfts",
                        to="core.nftcollection",
                    ),
                ),
            ],
            options={
                "ordering": ["collection", "serial_number"],
                "unique_together": {("collection", "serial_number")},
            },
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("voter_wallet", models.CharField(max_length=64)),
                ("hcs_message_id", models.CharField(max_length=100)),
                ("voted_at", models.DateTimeField(auto_now_add=True)),
                ("voting_power", models.IntegerField(default=1)),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.competition",
                    ),
                ),
                (
                    "contestant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes_received",
                        to="core.contestant",
                    ),
                ),
            ],
            options={
                "unique_together": {("competition", "voter_wallet", "contestant")},
            },
        ),
    ]
